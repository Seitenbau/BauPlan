{"version":3,"sources":["../static/js/1.8d1b167f.chunk.js","containers/Plans/sagas.js","containers/Plans/constants.js","../node_modules/babel-runtime/regenerator/index.js","../node_modules/regenerator-runtime/runtime-module.js","../node_modules/regenerator-runtime/runtime.js","settings/plans.json","containers/Plans/actions.js"],"names":["webpackJsonp","239","module","__webpack_exports__","__webpack_require__","defaultSaga","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default","a","wrap","_context","prev","next","Object","__WEBPACK_IMPORTED_MODULE_1_redux_saga_effects__","__WEBPACK_IMPORTED_MODULE_4__constants__","getTables","getProjects","stop","_marked","this","_context2","__WEBPACK_IMPORTED_MODULE_3__actions__","name","x","y","floor","rotation","number","projects","planId","_marked2","_context3","id","short","color","_marked3","getPLans","_context4","__WEBPACK_IMPORTED_MODULE_2_settings_plans_json___default","_marked4","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator__","n","__WEBPACK_IMPORTED_MODULE_2_settings_plans_json__","mark","246","d","DEFAULT_ACTION","REQUEST_FLOORS","REQUEST_FLOORS_SUCCESS","REQUEST_FLOORS_ERROR","REQUEST_TABLE_DATA","REQUEST_TABLE_DATA_SUCCESS","REQUEST_TABLE_DATA_ERROR","REQUEST_PROJECTS_DATA","REQUEST_PROJECTS_DATA_SUCCESS","REQUEST_PROJECTS_DATA_ERROR","248","exports","249","g","Function","hadRuntime","regeneratorRuntime","getOwnPropertyNames","indexOf","oldRuntime","undefined","e","250","global","innerFn","outerFn","self","tryLocsList","protoGenerator","prototype","Generator","generator","create","context","Context","_invoke","makeInvokeMethod","tryCatch","fn","obj","arg","type","call","err","GeneratorFunction","GeneratorFunctionPrototype","defineIteratorMethods","forEach","method","AsyncIterator","invoke","resolve","reject","record","result","hasOwn","Promise","__await","then","unwrapped","enqueue","callInvokeWithMethodAndArg","previousPromise","state","GenStateSuspendedStart","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","done","GenStateSuspendedYield","iterator","return","TypeError","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","values","iterable","iteratorMethod","iteratorSymbol","isNaN","length","i","Op","hasOwnProperty","$Symbol","Symbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","inModule","runtime","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","constructor","displayName","isGeneratorFunction","genFun","ctor","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","object","key","reverse","pop","skipTempReset","charAt","slice","rootEntry","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","293","imageName","mapScaleFactor","labels","294","requestPlansSuccess","data","__WEBPACK_IMPORTED_MODULE_0__constants__","requestTableDataSuccess","requestProjectDataSuccess"],"mappings":"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","file":"static/js/1.8d1b167f.chunk.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 239:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (immutable) */ __webpack_exports__[\"defaultSaga\"] = defaultSaga;\n/* harmony export (immutable) */ __webpack_exports__[\"getTables\"] = getTables;\n/* harmony export (immutable) */ __webpack_exports__[\"getProjects\"] = getProjects;\n/* harmony export (immutable) */ __webpack_exports__[\"getPLans\"] = getPLans;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator__ = __webpack_require__(248);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_redux_saga_effects__ = __webpack_require__(92);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_settings_plans_json__ = __webpack_require__(293);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_settings_plans_json___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_settings_plans_json__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__actions__ = __webpack_require__(294);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__constants__ = __webpack_require__(246);\nvar _marked=/*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(defaultSaga),_marked2=/*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(getTables),_marked3=/*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(getProjects),_marked4=/*#__PURE__*/__WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.mark(getPLans);// Individual exports for testing\nfunction defaultSaga(){return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function defaultSaga$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return Object(__WEBPACK_IMPORTED_MODULE_1_redux_saga_effects__[\"b\" /* takeLatest */])(__WEBPACK_IMPORTED_MODULE_4__constants__[\"h\" /* REQUEST_TABLE_DATA */],getTables);case 2:_context.next=4;return Object(__WEBPACK_IMPORTED_MODULE_1_redux_saga_effects__[\"b\" /* takeLatest */])(__WEBPACK_IMPORTED_MODULE_4__constants__[\"e\" /* REQUEST_PROJECTS_DATA */],getProjects);case 4:case'end':return _context.stop();}}},_marked,this);}/* parameter : action */function getTables(){return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function getTables$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return Object(__WEBPACK_IMPORTED_MODULE_1_redux_saga_effects__[\"a\" /* put */])(Object(__WEBPACK_IMPORTED_MODULE_3__actions__[\"c\" /* requestTableDataSuccess */])([{name:'Tim Dresner',x:15,y:20,floor:0,rotation:0,number:1,projects:[1,2],planId:'F0'},{name:'Christina Freud',x:20,y:12,floor:0,rotation:180,projects:1,number:2,planId:'F0'},{name:'Martina Huber',x:30,y:25,floor:1,rotation:245,projects:2,number:2,planId:'F1'},{name:'Jan Friedmann',x:25,y:11,floor:0,rotation:90,projects:1,number:3,planId:'F0'}]));case 2:case'end':return _context2.stop();}}},_marked2,this);}function getProjects(){return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function getProjects$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return Object(__WEBPACK_IMPORTED_MODULE_1_redux_saga_effects__[\"a\" /* put */])(Object(__WEBPACK_IMPORTED_MODULE_3__actions__[\"b\" /* requestProjectDataSuccess */])([{id:1,name:'Human Resources',short:'HR',color:'#FFFF00'},{id:2,name:'Financial Department',short:'FD',color:'#FF00FF'}]));case 2:case'end':return _context3.stop();}}},_marked3,this);}function getPLans(){return __WEBPACK_IMPORTED_MODULE_0_babel_runtime_regenerator___default.a.wrap(function getPLans$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return Object(__WEBPACK_IMPORTED_MODULE_1_redux_saga_effects__[\"a\" /* put */])(Object(__WEBPACK_IMPORTED_MODULE_3__actions__[\"a\" /* requestPlansSuccess */])(__WEBPACK_IMPORTED_MODULE_2_settings_plans_json___default.a));case 2:case'end':return _context4.stop();}}},_marked4,this);}// All sagas to be loaded\n/* harmony default export */ __webpack_exports__[\"default\"] = ([defaultSaga,getPLans,getTables,getProjects]);\n\n/***/ }),\n\n/***/ 246:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return DEFAULT_ACTION; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return REQUEST_FLOORS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return REQUEST_FLOORS_SUCCESS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return REQUEST_FLOORS_ERROR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return REQUEST_TABLE_DATA; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return REQUEST_TABLE_DATA_SUCCESS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return REQUEST_TABLE_DATA_ERROR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return REQUEST_PROJECTS_DATA; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return REQUEST_PROJECTS_DATA_SUCCESS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return REQUEST_PROJECTS_DATA_ERROR; });\n/*\n *\n * Plans constants\n *\n */var DEFAULT_ACTION='app/Plans/DEFAULT_ACTION';var REQUEST_FLOORS='app/Plans/REQUEST_FLOORS';var REQUEST_FLOORS_SUCCESS='app/Plans/REQUEST_FLOORS_SUCCESS';var REQUEST_FLOORS_ERROR='app/Plans/REQUEST_FLOORS_ERROR';var REQUEST_TABLE_DATA='app/Plans/REQUEST_TABLE_DATA';var REQUEST_TABLE_DATA_SUCCESS='app/Plans/REQUEST_TABLE_DATA_SUCCESS';var REQUEST_TABLE_DATA_ERROR='app/Plans/REQUEST_TABLE_DATA_ERROR';var REQUEST_PROJECTS_DATA='app/Plans/REQUEST_PROJECTS_DATA';var REQUEST_PROJECTS_DATA_SUCCESS='app/Plans/REQUEST_PROJECTS_DATA_SUCCESS';var REQUEST_PROJECTS_DATA_ERROR='app/Plans/REQUEST_PROJECTS_DATA_ERROR';// export const WINDOW_LIFE_RESIZE = 'app/Plans/WINDOW_LIFE_RESIZE';\n\n/***/ }),\n\n/***/ 248:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(249);\n\n\n/***/ }),\n\n/***/ 249:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() { return this })() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(250);\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\n\n/***/ }),\n\n/***/ 250:\n/***/ (function(module, exports) {\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n\n\n/***/ }),\n\n/***/ 293:\n/***/ (function(module, exports) {\n\nmodule.exports = [{\"name\":\"Headquarter floor 0\",\"id\":\"F0\",\"imageName\":\"Bauplan_Sample.png\",\"mapScaleFactor\":60,\"labels\":[{\"name\":\"Meetingroom 1\",\"x\":31,\"y\":6},{\"name\":\"Meetingroom 2\",\"x\":31,\"y\":20},{\"name\":\"Meetingroom 3\",\"x\":19,\"y\":6}]},{\"name\":\"Headquarter floor 1\",\"id\":\"F1\",\"imageName\":\"Bauplan_Sample.png\",\"mapScaleFactor\":50,\"labels\":[{\"name\":\"Meetingroom 4\",\"x\":10,\"y\":5}]},{\"name\":\"Headquarter floor 2\",\"id\":\"F2\",\"imageName\":\"Bauplan_Sample.png\",\"mapScaleFactor\":50,\"labels\":[{\"name\":\"Meetingroom 5\",\"x\":37,\"y\":8}]},{\"name\":\"Headquarter floor 3\",\"id\":\"F3\",\"imageName\":\"Bauplan_Sample.png\",\"mapScaleFactor\":50,\"labels\":[{\"name\":\"Meetingroom 6\",\"x\":13,\"y\":25}]}]\n\n/***/ }),\n\n/***/ 294:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export defaultAction */\n/* unused harmony export requestPlans */\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = requestPlansSuccess;\n/* unused harmony export requestPlansError */\n/* unused harmony export requestTableData */\n/* harmony export (immutable) */ __webpack_exports__[\"c\"] = requestTableDataSuccess;\n/* unused harmony export requestTableDataError */\n/* unused harmony export requestProjectData */\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = requestProjectDataSuccess;\n/* unused harmony export requestProjectDataError */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__constants__ = __webpack_require__(246);\n/*\n *\n * Plans actions\n *\n */function defaultAction(){return{type:__WEBPACK_IMPORTED_MODULE_0__constants__[\"a\" /* DEFAULT_ACTION */]};}function requestPlans(){return{type:__WEBPACK_IMPORTED_MODULE_0__constants__[\"b\" /* REQUEST_FLOORS */]};}function requestPlansSuccess(data){return{type:__WEBPACK_IMPORTED_MODULE_0__constants__[\"d\" /* REQUEST_FLOORS_SUCCESS */],data:data};}function requestPlansError(error){return{type:__WEBPACK_IMPORTED_MODULE_0__constants__[\"c\" /* REQUEST_FLOORS_ERROR */],error:error};}function requestTableData(){return{type:__WEBPACK_IMPORTED_MODULE_0__constants__[\"h\" /* REQUEST_TABLE_DATA */]};}function requestTableDataSuccess(data){return{type:__WEBPACK_IMPORTED_MODULE_0__constants__[\"j\" /* REQUEST_TABLE_DATA_SUCCESS */],data:data};}function requestTableDataError(error){return{type:__WEBPACK_IMPORTED_MODULE_0__constants__[\"i\" /* REQUEST_TABLE_DATA_ERROR */],error:error};}function requestProjectData(){return{type:__WEBPACK_IMPORTED_MODULE_0__constants__[\"e\" /* REQUEST_PROJECTS_DATA */]};}function requestProjectDataSuccess(data){return{type:__WEBPACK_IMPORTED_MODULE_0__constants__[\"g\" /* REQUEST_PROJECTS_DATA_SUCCESS */],data:data};}function requestProjectDataError(error){return{type:__WEBPACK_IMPORTED_MODULE_0__constants__[\"f\" /* REQUEST_PROJECTS_DATA_ERROR */],error:error};}// export function windowLifeResize(data) {\n//   return {\n//     type: WINDOW_LIFE_RESIZE,\n//     data,\n//   };\n// }\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/1.8d1b167f.chunk.js","import { put, takeLatest } from 'redux-saga/effects';\nimport plans from 'settings/plans.json';\nimport { requestTableDataSuccess, requestProjectDataSuccess, requestPlansSuccess } from './actions';\nimport {\n  REQUEST_TABLE_DATA,\n  REQUEST_PROJECTS_DATA,\n} from './constants';\n\n// Individual exports for testing\nexport function* defaultSaga() {\n  // See example in containers/HomePage/sagas.js\n  yield takeLatest(REQUEST_TABLE_DATA, getTables);\n  yield takeLatest(REQUEST_PROJECTS_DATA, getProjects);\n}\n\n/* parameter : action */\nexport function* getTables() {\n  yield put(requestTableDataSuccess(\n    [{\n      name: 'Tim Dresner',\n      x: 15,\n      y: 20,\n      floor: 0,\n      rotation: 0,\n      number: 1,\n      projects: [1, 2],\n      planId: 'F0',\n    }, {\n      name: 'Christina Freud',\n      x: 20,\n      y: 12,\n      floor: 0,\n      rotation: 180,\n      projects: 1,\n      number: 2,\n      planId: 'F0',\n    }, {\n      name: 'Martina Huber',\n      x: 30,\n      y: 25,\n      floor: 1,\n      rotation: 245,\n      projects: 2,\n      number: 2,\n      planId: 'F1',\n    }, {\n      name: 'Jan Friedmann',\n      x: 25,\n      y: 11,\n      floor: 0,\n      rotation: 90,\n      projects: 1,\n      number: 3,\n      planId: 'F0',\n    }]\n  ));\n}\n\nexport function* getProjects() {\n  yield put(requestProjectDataSuccess(\n    [{\n      id: 1,\n      name: 'Human Resources',\n      short: 'HR',\n      color: '#FFFF00',\n    }, {\n      id: 2,\n      name: 'Financial Department',\n      short: 'FD',\n      color: '#FF00FF',\n    }]\n  ));\n}\n\nexport function* getPLans() {\n  yield put(requestPlansSuccess(plans));\n}\n\n// All sagas to be loaded\nexport default [\n  defaultSaga,\n  getPLans,\n  getTables,\n  getProjects,\n];\n\n\n\n// WEBPACK FOOTER //\n// ./src/containers/Plans/sagas.js","/*\n *\n * Plans constants\n *\n */\n\nexport const DEFAULT_ACTION = 'app/Plans/DEFAULT_ACTION';\nexport const REQUEST_FLOORS = 'app/Plans/REQUEST_FLOORS';\nexport const REQUEST_FLOORS_SUCCESS = 'app/Plans/REQUEST_FLOORS_SUCCESS';\nexport const REQUEST_FLOORS_ERROR = 'app/Plans/REQUEST_FLOORS_ERROR';\n\nexport const REQUEST_TABLE_DATA = 'app/Plans/REQUEST_TABLE_DATA';\nexport const REQUEST_TABLE_DATA_SUCCESS = 'app/Plans/REQUEST_TABLE_DATA_SUCCESS';\nexport const REQUEST_TABLE_DATA_ERROR = 'app/Plans/REQUEST_TABLE_DATA_ERROR';\n\nexport const REQUEST_PROJECTS_DATA = 'app/Plans/REQUEST_PROJECTS_DATA';\nexport const REQUEST_PROJECTS_DATA_SUCCESS = 'app/Plans/REQUEST_PROJECTS_DATA_SUCCESS';\nexport const REQUEST_PROJECTS_DATA_ERROR = 'app/Plans/REQUEST_PROJECTS_DATA_ERROR';\n\n// export const WINDOW_LIFE_RESIZE = 'app/Plans/WINDOW_LIFE_RESIZE';\n\n\n\n// WEBPACK FOOTER //\n// ./src/containers/Plans/constants.js","module.exports = require(\"regenerator-runtime\");\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/babel-runtime/regenerator/index.js\n// module id = 248\n// module chunks = 1 2","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() { return this })() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/regenerator-runtime/runtime-module.js\n// module id = 249\n// module chunks = 1 2","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/regenerator-runtime/runtime.js\n// module id = 250\n// module chunks = 1 2","module.exports = [{\"name\":\"Headquarter floor 0\",\"id\":\"F0\",\"imageName\":\"Bauplan_Sample.png\",\"mapScaleFactor\":60,\"labels\":[{\"name\":\"Meetingroom 1\",\"x\":31,\"y\":6},{\"name\":\"Meetingroom 2\",\"x\":31,\"y\":20},{\"name\":\"Meetingroom 3\",\"x\":19,\"y\":6}]},{\"name\":\"Headquarter floor 1\",\"id\":\"F1\",\"imageName\":\"Bauplan_Sample.png\",\"mapScaleFactor\":50,\"labels\":[{\"name\":\"Meetingroom 4\",\"x\":10,\"y\":5}]},{\"name\":\"Headquarter floor 2\",\"id\":\"F2\",\"imageName\":\"Bauplan_Sample.png\",\"mapScaleFactor\":50,\"labels\":[{\"name\":\"Meetingroom 5\",\"x\":37,\"y\":8}]},{\"name\":\"Headquarter floor 3\",\"id\":\"F3\",\"imageName\":\"Bauplan_Sample.png\",\"mapScaleFactor\":50,\"labels\":[{\"name\":\"Meetingroom 6\",\"x\":13,\"y\":25}]}]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/settings/plans.json\n// module id = 293\n// module chunks = 1","/*\n *\n * Plans actions\n *\n */\n\nimport {\n  DEFAULT_ACTION,\n  REQUEST_FLOORS,\n  REQUEST_FLOORS_SUCCESS,\n  REQUEST_FLOORS_ERROR,\n  REQUEST_TABLE_DATA,\n  REQUEST_TABLE_DATA_SUCCESS,\n  REQUEST_TABLE_DATA_ERROR,\n  REQUEST_PROJECTS_DATA,\n  REQUEST_PROJECTS_DATA_SUCCESS,\n  REQUEST_PROJECTS_DATA_ERROR,\n  // WINDOW_LIFE_RESIZE,\n} from './constants';\n\nexport function defaultAction() {\n  return {\n    type: DEFAULT_ACTION,\n  };\n}\n\nexport function requestPlans() {\n  return {\n    type: REQUEST_FLOORS,\n  };\n}\n\nexport function requestPlansSuccess(data) {\n  return {\n    type: REQUEST_FLOORS_SUCCESS,\n    data,\n  };\n}\n\nexport function requestPlansError(error) {\n  return {\n    type: REQUEST_FLOORS_ERROR,\n    error,\n  };\n}\n\nexport function requestTableData() {\n  return {\n    type: REQUEST_TABLE_DATA,\n  };\n}\n\nexport function requestTableDataSuccess(data) {\n  return {\n    type: REQUEST_TABLE_DATA_SUCCESS,\n    data,\n  };\n}\n\nexport function requestTableDataError(error) {\n  return {\n    type: REQUEST_TABLE_DATA_ERROR,\n    error,\n  };\n}\n\nexport function requestProjectData() {\n  return {\n    type: REQUEST_PROJECTS_DATA,\n  };\n}\n\nexport function requestProjectDataSuccess(data) {\n  return {\n    type: REQUEST_PROJECTS_DATA_SUCCESS,\n    data,\n  };\n}\n\nexport function requestProjectDataError(error) {\n  return {\n    type: REQUEST_PROJECTS_DATA_ERROR,\n    error,\n  };\n}\n\n// export function windowLifeResize(data) {\n//   return {\n//     type: WINDOW_LIFE_RESIZE,\n//     data,\n//   };\n// }\n\n\n\n// WEBPACK FOOTER //\n// ./src/containers/Plans/actions.js"],"sourceRoot":""}